TOKEN TYPE      LEXEME               LINE      
-----------------------------------------------------
PREPROCESSOR    #include <stdio.h>   1         
COMMENT         // Function to perform binary search 3         
KEYWORD         int                  4         
IDENTIFIER      binarySearch         4         
PUNCTUATION     (                    4         
KEYWORD         int                  4         
IDENTIFIER      arr                  4         
PUNCTUATION     [                    4         
PUNCTUATION     ]                    4         
PUNCTUATION     ,                    4         
KEYWORD         int                  4         
IDENTIFIER      size                 4         
PUNCTUATION     ,                    4         
KEYWORD         int                  4         
IDENTIFIER      target               4         
PUNCTUATION     )                    4         
PUNCTUATION     {                    4         
KEYWORD         int                  5         
IDENTIFIER      low                  5         
OPERATOR        =                    5         
NUMBER          0                    5         
PUNCTUATION     ,                    5         
IDENTIFIER      high                 5         
OPERATOR        =                    5         
IDENTIFIER      size                 5         
OPERATOR        -                    5         
NUMBER          1                    5         
PUNCTUATION     ;                    5         
KEYWORD         while                7         
PUNCTUATION     (                    7         
IDENTIFIER      low                  7         
OPERATOR        <=                   7         
IDENTIFIER      high                 7         
PUNCTUATION     )                    7         
PUNCTUATION     {                    7         
KEYWORD         int                  8         
IDENTIFIER      mid                  8         
OPERATOR        =                    8         
IDENTIFIER      low                  8         
OPERATOR        +                    8         
PUNCTUATION     (                    8         
IDENTIFIER      high                 8         
OPERATOR        -                    8         
IDENTIFIER      low                  8         
PUNCTUATION     )                    8         
OPERATOR        /                    8         
NUMBER          2                    8         
PUNCTUATION     ;                    8         
COMMENT         // Check if the target is at mid 10        
KEYWORD         if                   11        
PUNCTUATION     (                    11        
IDENTIFIER      arr                  11        
PUNCTUATION     [                    11        
IDENTIFIER      mid                  11        
PUNCTUATION     ]                    11        
OPERATOR        ==                   11        
IDENTIFIER      target               11        
PUNCTUATION     )                    11        
PUNCTUATION     {                    11        
KEYWORD         return               12        
IDENTIFIER      mid                  12        
PUNCTUATION     ;                    12        
COMMENT         // Target found at index mid 12        
PUNCTUATION     }                    13        
COMMENT         // If target is greater, ignore the left half 15        
KEYWORD         if                   16        
PUNCTUATION     (                    16        
IDENTIFIER      arr                  16        
PUNCTUATION     [                    16        
IDENTIFIER      mid                  16        
PUNCTUATION     ]                    16        
OPERATOR        <                    16        
IDENTIFIER      target               16        
PUNCTUATION     )                    16        
PUNCTUATION     {                    16        
IDENTIFIER      low                  17        
OPERATOR        =                    17        
IDENTIFIER      mid                  17        
OPERATOR        +                    17        
NUMBER          1                    17        
PUNCTUATION     ;                    17        
PUNCTUATION     }                    18        
COMMENT         // If target is smaller, ignore the right half 19        
KEYWORD         else                 20        
PUNCTUATION     {                    20        
IDENTIFIER      high                 21        
OPERATOR        =                    21        
IDENTIFIER      mid                  21        
OPERATOR        -                    21        
NUMBER          1                    21        
PUNCTUATION     ;                    21        
PUNCTUATION     }                    22        
PUNCTUATION     }                    23        
KEYWORD         return               25        
OPERATOR        -                    25        
NUMBER          1                    25        
PUNCTUATION     ;                    25        
COMMENT         // Target not found  25        
PUNCTUATION     }                    26        
KEYWORD         int                  28        
IDENTIFIER      main                 28        
PUNCTUATION     (                    28        
PUNCTUATION     )                    28        
PUNCTUATION     {                    28        
KEYWORD         int                  29        
IDENTIFIER      arr                  29        
PUNCTUATION     [                    29        
PUNCTUATION     ]                    29        
OPERATOR        =                    29        
PUNCTUATION     {                    29        
NUMBER          1                    29        
PUNCTUATION     ,                    29        
NUMBER          3                    29        
PUNCTUATION     ,                    29        
NUMBER          5                    29        
PUNCTUATION     ,                    29        
NUMBER          7                    29        
PUNCTUATION     ,                    29        
NUMBER          9                    29        
PUNCTUATION     ,                    29        
NUMBER          11                   29        
PUNCTUATION     ,                    29        
NUMBER          13                   29        
PUNCTUATION     ,                    29        
NUMBER          15                   29        
PUNCTUATION     ,                    29        
NUMBER          17                   29        
PUNCTUATION     }                    29        
PUNCTUATION     ;                    29        
KEYWORD         int                  30        
IDENTIFIER      size                 30        
OPERATOR        =                    30        
KEYWORD         sizeof               30        
PUNCTUATION     (                    30        
IDENTIFIER      arr                  30        
PUNCTUATION     )                    30        
OPERATOR        /                    30        
KEYWORD         sizeof               30        
PUNCTUATION     (                    30        
IDENTIFIER      arr                  30        
PUNCTUATION     [                    30        
NUMBER          0                    30        
PUNCTUATION     ]                    30        
PUNCTUATION     )                    30        
PUNCTUATION     ;                    30        
KEYWORD         int                  31        
IDENTIFIER      target               31        
OPERATOR        =                    31        
NUMBER          7                    31        
PUNCTUATION     ;                    31        
KEYWORD         int                  33        
IDENTIFIER      result               33        
OPERATOR        =                    33        
IDENTIFIER      binarySearch         33        
PUNCTUATION     (                    33        
IDENTIFIER      arr                  33        
PUNCTUATION     ,                    33        
IDENTIFIER      size                 33        
PUNCTUATION     ,                    33        
IDENTIFIER      target               33        
PUNCTUATION     )                    33        
PUNCTUATION     ;                    33        
KEYWORD         if                   35        
PUNCTUATION     (                    35        
IDENTIFIER      result               35        
OPERATOR        !=                   35        
OPERATOR        -                    35        
NUMBER          1                    35        
PUNCTUATION     )                    35        
PUNCTUATION     {                    35        
IDENTIFIER      printf               36        
PUNCTUATION     (                    36        
STRING          "Element %d found at index %d.\\n" 36        
PUNCTUATION     ,                    36        
IDENTIFIER      target               36        
PUNCTUATION     ,                    36        
IDENTIFIER      result               36        
PUNCTUATION     )                    36        
PUNCTUATION     ;                    36        
PUNCTUATION     }                    37        
KEYWORD         else                 37        
PUNCTUATION     {                    37        
IDENTIFIER      printf               38        
PUNCTUATION     (                    38        
STRING          "Element %d not found in the array.\\n" 38        
PUNCTUATION     ,                    38        
IDENTIFIER      target               38        
PUNCTUATION     )                    38        
PUNCTUATION     ;                    38        
PUNCTUATION     }                    39        
KEYWORD         return               41        
NUMBER          0                    41        
PUNCTUATION     ;                    41        
PUNCTUATION     }                    42        
